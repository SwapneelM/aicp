# Three jobs to test new E2 policy and not stopping policies after they reach the correct estimate. Changes to when R policies return None.
# If pool is empty, sample from population setting
# Commit: 05a5b5ef5502fec91bb81af3b62c096f153b88ca

bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 10 --random_state 0 --tag may4
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 100 --random_state 0 --tag may4
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 1000 --random_state 0 --tag may4

# Same, but picking random interventions if policies have an empty pool
# Commit: b05f665291a1563a9f03177a661a5a2c99e534d5
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 10 --random_state 0 --tag may4r
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 100 --random_state 0 --tag may4r
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 100 --runs 4 --p_min 12 --p_max 12 --w_min 0.5 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --max_iter 50 --alpha 0.0002 --finite --n 1000 --random_state 0 --tag may4r

# One population setting job to test results about descendants, ancestors, poc, etc

bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 500 --runs 4 --p_min 15 --p_max 15 --w_min 0 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --random_state 0 --tag may4pop
bsub -n 48 -W 72:00 python -m src.run_experiments --n_workers 47 --k 3 --G 500 --runs 4 --p_min 15 --p_max 15 --w_min 0 --w_max 1 --var_min 0 --var_max 1 --int_min 0 --int_max 1 --batch_size 20000 --random_state 1 --tag may4pop


["experiments/results_1588615583_runs:4_max_iter:50_random_state:0_tag:may4r_G:100_k:3.0_p_min:12_p_max:12_w_min:0.5_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:True_n:100_alpha:0.0002.pickle"],
["experiments/results_1588626633_runs:4_max_iter:50_random_state:0_tag:may4r_G:100_k:3.0_p_min:12_p_max:12_w_min:0.5_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:True_n:10_alpha:0.0002.pickle"],
["experiments/results_1588737774_runs:4_max_iter:50_random_state:0_tag:may4r_G:100_k:3.0_p_min:12_p_max:12_w_min:0.5_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:True_n:1000_alpha:0.0002.pickle"],




results_1588630517_runs:4_max_iter:-1_random_state:1_tag:may4pop_G:500_k:3.0_p_min:15_p_max:15_w_min:0.0_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:False.pickle
results_1588631668_runs:4_max_iter:-1_random_state:0_tag:may4pop_G:500_k:3.0_p_min:15_p_max:15_w_min:0.0_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:False.pickle

#results_1588727222_runs:4_max_iter:50_random_state:0_tag:may4_G:100_k:3.0_p_min:12_p_max:12_w_min:0.5_w_max:1.0_var_min:0.0_var_max:1.0_int_min:0.0_int_max:1.0_do:False_i_mean:10_i_var:1_finite:True_n:1000_alpha:0.0002.pickle
